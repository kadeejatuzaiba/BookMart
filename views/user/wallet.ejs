<%- include('../partials/user/profileHeader') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<div class="container mt-1">
  <!-- Wallet Header -->
<h2 class="fw-bold mb-4">Wallet & Transactions</h2>

<!-- Wallet Section -->
<div class="d-flex flex-column align-items-center mb-4">

  <!-- Wallet Balance Box -->
  <div class="card text-center p-4 shadow" style="width: 500px; background-color: #3a3f51; border-radius: 15px; color: #ffffff;">
    <div>
      <h1 class="display-6 fw-bold mb-1" style="color: #ffffff;">
        ₹ <%= (user.wallet && user.wallet.balance) ? user.wallet.balance.toFixed(2) : '0.00' %>
      </h1>
      <p class="mb-0" style="font-size: 14px; color: #a5d6a7;">Available Balance</p>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="d-flex justify-content-center gap-3 mt-3">
    <button class="btn btn-dark px-4 py-2 rounded shadow-sm" style="height: 40px;" data-bs-toggle="modal" data-bs-target="#addBalanceModal">
  <i class="bi bi-plus-lg"></i> Add Balance
</button>

<button 
  class="btn btn-dark px-4 py-2 rounded shadow-sm" 
  style="height: 40px;" 
  data-bs-toggle="modal" 
  data-bs-target="#withdrawModal"
>
  <i class="bi bi-dash-lg"></i> Withdraw
</button>

  </div>

</div>


  <!-- Transaction History -->
<h4 class="fw-bold mb-3">Transaction History</h4>

<div class="table-responsive">
  <table class="table table-bordered text-center align-middle">
    <thead class="table-light">
      <tr>
        <th>Amount</th>
        <th>Purpose</th>
        <th>Date</th>
        <th>Type</th>
      </tr>
    </thead>
    <tbody>
<% if (!transactions || transactions.length === 0) { %>
  <tr>
    <td colspan="4" class="text-muted">No transactions yet.</td>
  </tr>
<% } else { %>
  <% transactions.forEach(tx => { %>
    <tr>
      <td>₹<%= tx.amount.toFixed(2) %></td>
      <td><%= tx.description %></td>
      <td><%= new Date(tx.date).toLocaleDateString('en-IN') %></td>
      <td>
        <span class="badge <%= tx.type === 'credit' ? 'bg-success' : 'bg-danger' %>">
          <%= tx.type.charAt(0).toUpperCase() + tx.type.slice(1) %>
        </span>
      </td>
    </tr>
  <% }) %>
<% } %>

    </tbody>
  </table>
</div>

<!-- Pagination -->
<nav aria-label="Wallet pagination">
  <ul class="pagination justify-content-center">
    <% for (let i = 1; i <= totalPages; i++) { %>
      <li class="page-item <%= i === currentPage ? 'active' : '' %>">
        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
      </li>
    <% } %>
  </ul>
</nav>





<div class="modal fade" id="addBalanceModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header py-2">
        <h5 class="modal-title">Add Money to Wallet</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-3">
        <div class="mb-3">
          <div class="input-group">
            <span class="input-group-text">₹</span>
            <input type="number" id="amount" class="form-control form-control-lg w-100 text-center"
              placeholder="Enter Amount" min="1" step="1" aria-label="Amount to add" />
          </div>
          <div id="amount-error-message" class="text-danger mt-1 small" style="display: none;"></div>
        </div>
        <div class="d-flex flex-wrap justify-content-center gap-2 mb-3">
          <button class="btn btn-outline-primary quick-amount" onclick="setAmount(1000)">₹1000</button>
          <button class="btn btn-outline-primary quick-amount" onclick="setAmount(5000)">₹5000</button>
          <button class="btn btn-outline-primary quick-amount" onclick="setAmount(10000)">₹10000</button>
          <button class="btn btn-outline-primary quick-amount" onclick="setAmount(20000)">₹20000</button>
        </div>
      </div>
      <div class="modal-footer py-2 d-flex justify-content-between">
        <button type="button" class="btn btn-sm btn-danger" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-sm btn-primary" id="payButton" onclick="addMoney()">Proceed to Pay</button>
      </div>
    </div>
  </div>
</div>


<div class="modal fade" id="withdrawModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header py-2">
        <h5 class="modal-title">Withdraw Money</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-3">
        <div class="mb-3">
          <label for="withdrawAmount" class="form-label small mb-1">Enter Amount to Withdraw</label>
          <div class="input-group">
            <span class="input-group-text">₹</span>
            <input type="number" id="withdrawAmount" class="form-control w-100" min="1" step="1"
              placeholder="0.00" aria-label="Amount to withdraw" />
          </div>
          <div id="withdraw-error-message" class="text-danger mt-1 small" style="display: none;"></div>
        </div>
      </div>
      <div class="modal-footer py-2 d-flex justify-content-between">
        <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-sm btn-primary" id="withdrawButton">Withdraw</button>
      </div>
    </div>
  </div>
</div>

<script>
  function setAmount(amount) {
    document.getElementById("amount").value = amount;
  }

  async function addMoney() {
  const amount = document.getElementById("amount").value;
  const errorMessageElement = document.getElementById("amount-error-message");
  
  if (!amount || amount <= 0) {
    errorMessageElement.textContent = "Please enter a valid amount.";
    errorMessageElement.style.display = "block";
    return;
  }
  
  // Hide error message if amount is valid
  errorMessageElement.style.display = "none";

  // Create Order from Backend
  const response = await fetch("/wallet/createOrder", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ amount }),
    
  });

  const order = await response.json();

  const options = {
    key: "<%= process.env.RAZORPAY_KEY_ID %>",
    amount: order.amount,
    currency: "INR",
    name: "BookMart wallet",
    description: "Wallet Top-Up",
    order_id: order.id,
    handler: async function (response) {
      const verifyRes = await fetch("/wallet/verifyPayment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          razorpay_order_id: response.razorpay_order_id,
          razorpay_payment_id: response.razorpay_payment_id,
          razorpay_signature: response.razorpay_signature,
          amount: amount,
        }),
      });

      const result = await verifyRes.json();
      if (result.success) {
        Swal.fire({
          title: "Success!",
          text: "Wallet Recharged Successfully!",
          icon: "success",
          confirmButtonText: "OK",
        }).then(() => {
          location.reload(); 
        });
      } else {
        Swal.fire({
          title: "Error!",
          text: "Payment Verification Failed",
          icon: "error",
          confirmButtonText: "Try Again",
        });
      }
    },
    prefill: {
      email: "<%= user.email %>",
      contact: "<%= user.phone %>",
    },
    theme: { color: "#3399cc" },
  };

  const paymentObject = new Razorpay(options);
  paymentObject.open();
}
  document
    .getElementById("withdrawButton")
    .addEventListener("click", async () => {
      const amountInput = document.getElementById("withdrawAmount");
      const amount = amountInput.value;
      const errorMsgElement = document.getElementById("withdraw-error-message");
      
      // Clear previous error message
      if (errorMsgElement) {
        errorMsgElement.textContent = "";
        errorMsgElement.style.display = "none";
      }

      if (!amount || amount < 1) {
        // Show error message instead of alert
        if (!errorMsgElement) {
          const errorMsg = document.createElement("div");
          errorMsg.id = "withdraw-error-message";
          errorMsg.className = "text-danger mt-1 small";
          errorMsg.textContent = "Please enter a valid amount";
          errorMsg.style.color = "red";
          amountInput.parentNode.parentNode.appendChild(errorMsg);
        } else {
          errorMsgElement.textContent = "Please enter a valid amount";
          errorMsgElement.style.display = "block";
        }
        return;
      }

      try {
        const response = await fetch("/wallet/withdrawMoney", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ amount }),
        });

        const data = await response.json();

        if (data.success) {
          Swal.fire({
            title: "Success!",
            text: "Money withdrawn successfully!",
            icon: "success",
            confirmButtonText: "OK",
            timer:5000,
            timerProgressBar: true,
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.reload();
            }
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: data.message || "Failed to withdraw money. Please try again.",
            icon: "error",
            confirmButtonText: "OK",
            timer:5000,
            timerProgressBar: true,
          });
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            title: "Error!",
            text: "Failed to withdraw money. Please try again.",
            icon: "error",
            confirmButtonText: "OK",
            timer:5000,
            timerProgressBar: true,
          });
      }
    });
</script>


<%- include('../partials/user/profileFooter') %>
