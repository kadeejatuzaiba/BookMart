<%- include('../partials/user/profileHeader') %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<style>
  .pagination .page-item.active .page-link {
    background: #007bff;
    border-color: #007bff;
    color: #fff;
  }
  a.text-danger:hover { background: rgba(220, 53, 69, .1); border-radius: 4px; }
  a.text-warning:hover { background: rgba(255, 193, 7, .15); border-radius: 4px; }
  a.text-primary:hover { background: rgba(13, 110, 253, .1); border-radius: 4px; }
  @media (max-width: 768px) {
    .order-meta > div { width: 49% !important; margin-bottom: .75rem; }
  }
</style>

<div class="container mt-4">
  <h2 class="mb-4">Your Orders</h2>

  <form class="d-flex align-items-center gap-2 mb-4" action="/orders" method="GET" style="max-width:600px">
    <input name="search" id="orderSearch" value="<%= search || '' %>" class="form-control" placeholder="Search by Order ID" style="height:38px">
    <button type="submit" class="btn btn-dark" style="height:38px;margin-bottom: 15px;">Search</button>
    <a href="/orders" class="btn btn-secondary" style="height:38px ;margin-bottom: 15px;">Clear</a>
  </form>

  <% if (orders.length) { %>
    <% orders.forEach(order => { %>
      <div class="border rounded shadow-sm p-3 mb-4 bg-light">

        <div class="d-flex justify-content-between flex-wrap order-meta">
          <div><strong>ORDER PLACED</strong><br><%= new Date(order.createdOn).toDateString() %></div>
          <div><strong>TOTAL</strong><br>â‚¹<%= order.finalAmount %></div>
          <div><strong>ORDER&nbsp;ID</strong><br><%= order.orderId %></div>
          <div>
            <strong>STATUS</strong><br>
            <span class="badge
              <%= order.status==='Delivered' ? 'bg-success' :
                  order.status==='Cancelled' ? 'bg-danger' :
                  order.status==='Pending' ? 'bg-warning text-dark' :
                  order.status==='Confirmed' ? 'bg-primary' :
                  order.status==='Shipped' ? 'bg-info text-dark' :
                  order.status==='Return Request' ? 'bg-warning' :
                  order.status==='returned' ? 'bg-dark text-white' :
                  'bg-light text-dark' %>">
              <%= order.status.toUpperCase() %>
            </span>
          </div>
          <div><strong>PAYMENT&nbsp;METHOD</strong><br><%= order.paymentMethod || 'Cash On Delivery' %></div>
<div class="d-flex flex-column">
  <a href="/view-order/<%= order._id %>" class="text-primary mb-1">View Details</a>

  <% if (!['Cancelled','returned'].includes(order.status)) { %>
      <% if (order.status === 'Delivered') { %>
          <a href="#" class="text-warning" onclick="returnOrderSwal('<%= order._id %>')">Return Order</a>

      <% } else if (order.status === 'Pending') { %>
          <!-- ðŸ”„ NEW: retry payment -->
          <!-- <a href="#" class="text-danger" onclick="retryPayment('<%= order._id %>')">Retry Payment</a> -->


          <a href="/retry-payment/<%= order._id %>" class="text-danger" >Retry Payment</a>


      <% } else { %>
          <!-- keeps Cancel for Confirmed / Processing / Shipped -->
          <a href="#" class="text-danger" onclick="cancelOrderSwal('<%= order._id %>')">Cancel Order</a>
      <% } %>
  <% } %>
</div>

        </div>
<% order.orderedItems.forEach(item => { %>
  <div class="d-flex justify-content-between align-items-center gap-3 border-top pt-3 mt-3 flex-wrap">
    <div class="d-flex align-items-center gap-3 flex-wrap">
      <img src="/uploads/product-images/<%= item.product.image[0] || 'placeholder.png' %>" alt="<%= item.product.productName %>" class="rounded" style="width:80px;height:80px;object-fit:cover">
      <div>
        <h5 class="mb-1"><%= item.product.productName %></h5>
        <div>Qty: <%= item.quantity %></div>
        <div>Price: â‚¹<%= item.price %></div>

        <% if (item.status === 'Cancelled') { %>
          <span class="badge bg-danger">PRODUCT CANCELLED</span>
        <% } else if (item.status === 'Return Request') { %>
          <span class="badge bg-warning text-dark">RETURN REQUESTED</span>
        <% } else if (item.status === 'returned') { %>
          <span class="badge bg-dark text-light">RETURNED</span>
        <% } else if (order.orderedItems.length > 1) { %>
          <% if (order.status === 'Delivered') { %>
            <a href="#" class="text-warning" onclick="returnItem('<%= order._id %>', '<%= item._id %>')">Return Product</a>
          <% } else if (['Pending', 'Confirmed', 'Processing', 'Shipped'].includes(order.status)) { %>
            <a href="#" class="text-danger" onclick="cancelItem('<%= order._id %>', '<%= item._id %>')">Cancel Product</a>
          <% } %>
        <% } %>

      </div>
    </div>
  </div>
<% }) %>

      </div>
    <% }) %>

    <% if (totalPages > 1) { %>
      <nav aria-label="Orders pagination">
        <ul class="pagination justify-content-center">
          <% if (currentPage > 1) { %>
            <li class="page-item">
              <a class="page-link" href="/orders?page=<%= currentPage - 1 %><%= search ? '&search='+encodeURIComponent(search) : '' %>">&laquo; Prev</a>
            </li>
          <% } %>
          <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
              <a class="page-link" href="/orders?page=<%= i %><%= search ? '&search='+encodeURIComponent(search) : '' %>"><%= i %></a>
            </li>
          <% } %>
          <% if (currentPage < totalPages) { %>
            <li class="page-item">
              <a class="page-link" href="/orders?page=<%= currentPage + 1 %><%= search ? '&search='+encodeURIComponent(search) : '' %>">Next &raquo;</a>
            </li>
          <% } %>
        </ul>
      </nav>
    <% } %>
  <% } else { %>
    <div class="alert alert-info">No orders found.</div>
  <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
function cancelItem(orderId, itemId) {
  Swal.fire({
    title: 'Cancel Product',
    html: `
      <form id="cancelItemForm">
        <div class="mb-2 text-start">
          <label for="cancelReason">Select Reason:</label>
          <select id="cancelReason" class="form-select" required>
            <option value="">-- Choose a reason --</option>
            <option value="Ordered by mistake">Ordered by mistake</option>
            <option value="Found a better price elsewhere">Found a better price elsewhere</option>
            <option value="Item not needed anymore">Item not needed anymore</option>
            <option value="Wrong item ordered">Wrong item ordered</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-2 text-start">
          <label for="cancelDescription">Description (optional):</label>
          <textarea id="cancelDescription" class="form-control" rows="2" placeholder="Provide more details (optional)"></textarea>
        </div>
      </form>
    `,
    showCancelButton: true,
    confirmButtonText: 'Confirm Cancel',
    focusConfirm: false,
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const description = document.getElementById('cancelDescription').value;

      if (!reason) {
        Swal.showValidationMessage('Please select a reason for cancellation.');
        return false;
      }

      return fetch(`/cancel-product/${orderId}/${itemId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ reason, description })
      })
        .then(res => res.json())
        .then(data => {
          if (!data.ok) {
            throw new Error(data.msg || 'Cancel failed');
          }
          return data;
        })
        .catch(err => {
          Swal.showValidationMessage(err.message);
        });
    }
  }).then(result => {
    if (result.isConfirmed) {
      Swal.fire('Cancelled!', 'The product has been cancelled.', 'success').then(() => location.reload());
    }
  });
}


  function returnItem(orderId, itemId) {
  Swal.fire({
    title: 'Return Product',
    html: `
      <form id="returnProductForm" enctype="multipart/form-data">
        <div class="mb-2 text-start">
          <label for="reason">Select Reason:</label>
          <select id="reason" class="form-select" required>
            <option value="">-- Choose a reason --</option>
            <option value="Product damaged">Product damaged</option>
            <option value="Wrong item delivered">Wrong item delivered</option>
            <option value="Not as described">Not as described</option>
            <option value="No longer needed">No longer needed</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-2 text-start">
          <label for="description">Description (optional):</label>
          <textarea id="description" class="form-control" rows="2" placeholder="Explain the issue..."></textarea>
        </div>
        <div class="mb-2 text-start">
          <label for="images">Upload Images (max 3):</label>
          <input type="file" id="images" class="form-control" accept="image/*" multiple>
        </div>
      </form>
    `,
    showCancelButton: true,
    confirmButtonText: 'Submit Return Request',
    focusConfirm: false,
    preConfirm: () => {
      const reason = document.getElementById('reason').value;
      const description = document.getElementById('description').value;
      const files = document.getElementById('images').files;

      if (!reason) {
        Swal.showValidationMessage('Please select a reason.');
        return false;
      }

      const formData = new FormData();
      formData.append('reason', reason);
      formData.append('description', description);

      for (let i = 0; i < files.length && i < 3; i++) {
        formData.append('images', files[i]);
      }

      return fetch(`/return-product/${orderId}/${itemId}`, {
        method: 'PATCH',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          if (!data.ok) {
            throw new Error(data.msg || 'Something went wrong');
          }
          return data;
        })
        .catch(err => {
          Swal.showValidationMessage(err.message);
        });
    }
  }).then(result => {
    if (result.isConfirmed) {
      Swal.fire('Requested!', 'Return request has been submitted.', 'success').then(() => location.reload());
    }
  });
}

function cancelOrderSwal(orderId) {
  Swal.fire({
    title: 'Cancel Order',
    html: `
      <form id="cancelForm">
        <div class="mb-2 text-start">
          <label for="cancelReason">Select Reason:</label>
          <select id="cancelReason" class="form-select" required>
            <option value="">-- Choose a reason --</option>
            <option value="Ordered by mistake">Ordered by mistake</option>
            <option value="Found a better price elsewhere">Found a better price elsewhere</option>
            <option value="Delivery is too late">Delivery is too late</option>
            <option value="Item no longer needed">Item no longer needed</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-2 text-start">
          <label for="cancelDescription">Description (optional):</label>
          <textarea id="cancelDescription" class="form-control" rows="2" placeholder="Provide more details (optional)"></textarea>
        </div>
      </form>
    `,
    showCancelButton: true,
    confirmButtonText: 'Confirm Cancel',
    focusConfirm: false,
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const description = document.getElementById('cancelDescription').value;

      if (!reason) {
        Swal.showValidationMessage('Please select a reason for cancellation.');
        return false;
      }

      return fetch(`/cancel-order/${orderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ reason, description })
      })
        .then(res => res.json())
        .then(data => {
          if (!data.ok) {
            throw new Error(data.msg || 'Cancel failed');
          }
          return data;
        })
        .catch(err => {
          Swal.showValidationMessage(err.message);
        });
    }
  }).then(result => {
    if (result.isConfirmed) {
      Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success').then(() => location.reload());
    }
  });
}

function returnOrderSwal(orderId) {
  Swal.fire({
    title: 'Return Order',
    html: `
      <form id="returnForm" enctype="multipart/form-data">
        <div class="mb-2 text-start">
          <label for="reason">Select Reason:</label>
          <select id="reason" class="form-select" required>
            <option value="">-- Choose a reason --</option>
            <option value="Product damaged">Product damaged</option>
            <option value="Received wrong item">Received wrong item</option>
            <option value="Item not as described">Item not as described</option>
            <option value="No longer needed">No longer needed</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-2 text-start">
          <label for="description">Description (optional):</label>
          <textarea id="description" class="form-control" rows="3" placeholder="Explain the issue..."></textarea>
        </div>
        <div class="mb-2 text-start">
          <label for="images">Upload Images (optional, max 3):</label>
          <input type="file" id="images" class="form-control" accept="image/*" multiple>
        </div>
      </form>
    `,
    showCancelButton: true,
    confirmButtonText: 'Submit Return Request',
    focusConfirm: false,
    preConfirm: () => {
      const reason = document.getElementById('reason').value;
      const description = document.getElementById('description').value;
      const files = document.getElementById('images').files;

      if (!reason) {
        Swal.showValidationMessage('Please select a reason for return.');
        return false;
      }

      const formData = new FormData();
      formData.append('reason', reason);
      formData.append('description', description);

      for (let i = 0; i < files.length && i < 3; i++) {
        formData.append('images', files[i]);
      }

      return fetch(`/return-order/${orderId}`, {
        method: 'POST',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          if (!data.ok) {
            throw new Error(data.msg || 'Return failed');
          }
          return data;
        })
        .catch(err => {
          Swal.showValidationMessage(err.message);
        });
    }
  }).then(result => {
    if (result.isConfirmed) {
      Swal.fire('Submitted!', 'Your return request has been submitted.', 'success').then(() => location.reload());
    }
  });
}


</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<%- include('../partials/user/profileFooter') %>
